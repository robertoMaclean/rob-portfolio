---
import ThemeToggle from "@/components/ThemeToggle.astro";
import LanguageToggle from "@/components/LanguageToggle.astro";

const navItems = [
  {
    titleEs: "Inicio",
    titleEn: "Home", 
    label: "inicio",
    url: "/#inicio",
  },
  {
    titleEs: "Experiencia",
    titleEn: "Experience",
    label: "experiencia",
    url: "/#experiencia",
  },
  {
    titleEs: "Proyectos",
    titleEn: "Projects",
    label: "proyectos", 
    url: "/#proyectos",
  },
  {
    titleEs: "Sobre m√≠",
    titleEn: "About me",
    label: "sobre-mi",
    url: "/#sobre-mi",
  },
];
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center"
  >
    {
      navItems.map((link) => (
        <a
          class="nav-link relative block px-2 py-2 transition hover:text-yellow-500 dark:hover:text-yellow-400"
          aria-label={link.label}
          href={link.url}
          data-title-es={link.titleEs}
          data-title-en={link.titleEn}
        >
          {link.titleEs}
        </a>
      ))
    }
    <LanguageToggle />
    <ThemeToggle />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-yellow-500");
            } else {
              item.classList.remove("text-yellow-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };

    // Handle language changes
    const updateNavLanguage = (language: string) => {
      const navLinks = document.querySelectorAll('.nav-link');
      navLinks.forEach((link) => {
        const titleKey = language === 'es' ? 'data-title-es' : 'data-title-en';
        const title = link.getAttribute(titleKey);
        if (title) {
          link.textContent = title;
        }
      });
    };

    // Listen for language changes
    document.addEventListener('languageChanged', (event: any) => {
      updateNavLanguage(event.detail.language);
    });

    // Initialize with current language
    const currentLanguage = localStorage.getItem('language') || 'es';
    updateNavLanguage(currentLanguage);
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/10 ring-white/20;
    }
  }
</style>
